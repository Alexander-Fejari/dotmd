generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------- 4 "mandatory" tables better-auth -------

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sessions      Session[]      @relation("UserSessions")
  accounts      Account[]      @relation("UserAccounts")
  verifications Verification[] @relation("UserVerifications")
  repoAccounts  repoAccount[]  @relation("UserRepoAccounts")

  @@map("user")
}

model Session {
  id                    String    @id @default(uuid())
  userId                String
  user                  User      @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt             DateTime
  token                 String?   @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  ipAddress             String?
  userAgent             String?
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  refreshToken          String?
  refreshTokenExpiresAt DateTime?

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation("UserVerifications", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification")
}

// ------- linked repositories account(s) -------

model repoAccount {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String // Ex. "github", "gitlab"
  userId                String
  user                  User      @relation("UserRepoAccounts", fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("repo_account")
}
