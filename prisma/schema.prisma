generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ------- 4 "mandatories" tables better-auth -------

model User {
  id            String    @id @default(uuid())
  name          String    @unique
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  UserData      UserData?

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

// PAS TOUCHE
model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

// PAS TOUCHE
model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

// ------- User Datas -------

model UserData {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  image String?

  isAdmin          Boolean @default(false)
  postLoginHandled Boolean @default(false)
  signUpFinished   Boolean @default(false)

  email       String?   @unique
  lastName    String?
  firstName   String?
  displayName String?
  userBio     String?
  birthday    DateTime?
  phoneNumber Int?

  repoAccounts RepoAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_data")
}

// ------- linked repositories account(s) -------

model RepoAccount {
  id         String  @id @default(uuid())
  accountId  String
  providerId String? // Ex. "github", "gitlab"

  userDataId String
  userData   UserData @relation(fields: [userDataId], references: [id], onDelete: Cascade)

  accessToken           String?
  accessTokenExpiresAt  DateTime?
  refreshToken          String?

  scope String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("repo_account")
}
